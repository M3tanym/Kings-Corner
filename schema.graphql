type User {
    id: ID!
    name: Name
    email: String!
    phoneNumber: String
    loginInformation: LoginInformation
    avatar: Url
    friends: [User!]!
    invites: [User!]!
    tokens: Int
    items: [Item!]!
}

type LoginInformation {
    username: String!
    password: String!
}

type Name {
    fullName: String
    firstName: String
    lastName: String
}

type Item {

}

type Match {
    id: ID!
    players: [User!]!
    boardState: BoardState
}

type BoardState {
    currentTurn: User!
    state: String!
}

input Invite {
    from: ID!
    to: ID!
}

input Move {
    matchID: ID!
    from: String!
    to: String!
}

scalar Url
scalar Date

type Query {
    user(id: ID, email: String, username: String, phoneNumber: String): User
    users: [User!]!
    match(id: ID!): Match
    friends(userID: ID!): [User!]
    matches(userID: ID!): [Match!]
}

type Mutation {
    createUser(email: String!, password: String!): User
    login(email: String, username: String, password: String!): User
    addUserPhoneNumber(phoneNumber: String!): User
    addUserName(name: String!): User
    addFriendToUser(id: ID!): User
    createMatch(playerOneID: ID!): Match
    addPlayerToMatch(matchID: ID!, playerID: ID!): Match
    makeMove(matchID: ID!, player: ID!, move: Move): Match
}