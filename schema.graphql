type User {
    _id: ID!
    name: String
    inGameName: String!
    avatar: String

    email: String!
    phoneNumber: String
    password: String!

    friends: [User!]!
    invites: [User!]!
    matches: [Match!]!

    money: Int
    items: [Item!]!
}

type Match {
    _id: ID!
    name: String

    white: User!
    black: User!
    players: [User!]!

    currentTurn: User!
    currentState: String!

    history: [String!]!
}

type Item {
    _id: ID!
    name: String!
    description: String!
}

input Invite {
    fromID: ID!
    toID: ID!
}

input Move {
    fromSquare: String!
    toSquare: String!
}

scalar Date

type Query {
    user(_id: ID, name: String, inGameName: String, email: String, phoneNumber: String): User
    match(_id: ID!): Match
}

type Mutation {
    createUser(email: String!, password: String!, inGameName: String!): User
    login(email: String, inGameName: String, password: String!): User
    modifyUser(playerID: ID!, email: String, phoneNumber: String, name: String, password: String, inGameName: String): User
    requestFriend(playerID: ID!, friendID: ID!): User
    createMatch(playerID: ID!): Match
    inviteFriend(playerID: ID!, matchID: ID!, invite: Invite): Match
    makeMove(playerID: ID!, matchID: ID!, move: Move): Match
}

type Subscription {
    getMatchUpdates(playerID: ID!, matchID: ID!): Match
}