type User {

    playerID: ID!

    # General User Information

    name: String
    avatar: Url

    # Login Information

    email: String!
    inGameName: String!
    phoneNumber: String
    password: String!

    # Game Information

    friends: [User!]!
    invites: [User!]!
    matches: [Match!]!

    # Shop Information

    money: Int
    items: [Item!]!
}

type Item {
    itemID: ID!
    description: String!
    name: String!
}

type Match {
    matchID: ID!
    players: [User!]!
    board: Board
}

type Board {
    history: [BoardState!]
}

type BoardState {
    currentTurn: User!
    state: String!
}

input Invite {
    matchID: ID!
    playerID: ID!
    name: String!
}

input Move {
    matchID: ID!
    from: String!
    to: String!
}

scalar Url
scalar Date

type Query {
    user(playerID: ID, email: String, inGameName: String, phoneNumber: String): User
    friends(playerID: ID!): [User!]!
    match(matchID: ID!): Match
    matches(matchID: ID!, userID: ID!): [Match!]!
}

type Mutation {
    createUser(email: String!, password: String!, inGameName: String!): User
    login(email: String, inGameName: String, password: String!): User
    modifyUser(email: String, phoneNumber: String, name: String, password: String, inGameName: String): User
    requestFriend(playerID: ID!): User
    createMatch: Match
    invitePlayer(matchID: ID!, playerID: ID!): Match
}

type Subscription {
    makeMove(matchID: ID!, playerID: ID!, move: Move): Match
    getMove: Match
}